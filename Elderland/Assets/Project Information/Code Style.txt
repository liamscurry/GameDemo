Started 2/15/21

Max characters per line: 100-120. Near 100 preferred (goal).
Max method lines: 30-35.

Comments:
Before methods:
/*
* Words go here. Only describe WHY this function needs to exist.
*/

Include names and types of parameters, what they are. Also include return types and what they are.
Syntax: 
type : name : short description.
Have inputs below: Inputs:
and outputs below: Outputs:
one on each line.

Inside methods:
Section parts of code with headers. Also include complex part descriptions 
for why you are doing these operations
// Comment example.

Explicit Setter Methods:
These methods are setters that should only becalled by specific classes on specific occasions.
They are more restrictive properties. Description above method should be for simplicity: 
// Explicit setter for Action fieldName

Properties:
If need to have explicit backing local variable, declare it on the
line under the property.
Put constant related fields next to these properties

Constructors Wrap:
Have closing ) be inline with beginning of new keyword.

Method Wrap:
Make sure to have arguments tabbed in once from beginning of instance identifier.
Have closing ) line up with beginning of type/method name call if no type/return value. 
Commas go after arguments and then a new line.

Nested types:
Have them declared at the top of the surrounding structure, above fields and properties even
if they are for the inspector.

Keywords:
TODO: text // this is used for guarenteed future implementation.
POSS: text // this is used for possible future implementation.

Preprocessor keywords:
DebugOutput, enables debug statements for class if defined.
DevMode, enables dev cheats for testing when defined.

Header labels:
When having header descriptions, prefix derived class headers with Classname: and then followed
by the description.

Constant names:
Camil case (including first letter caps).

Unit Tests Info:
Vision: test requires visual observation to validate. Unit tests with vision requirements
should have an Expected Behaviour section comment above its test method.

Input: input based tests use a fake controller and thus the controller cannot be used.

Feedback: feedback tests validate themselves via output, posting a success upon completion if
no bugs were detected.